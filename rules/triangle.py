"""Point Structure."""
from rules.drawable import *
triangleADT = {
    parent:(Polygon,),
    "new":{
        tuple():{
            args:tuple(),
            trgt:Triangle.default
        },
        (str,):{
            args:("_type",),
            trgt:Triangle.default
        },
        (float, float):{
            args:("angle1", "angle2"),
            trgt:Triangle.fromAngles
        },
        (float, float, float):{
            args:("base", "angle1", "angle2",),
            trgt:Triangle.fromAngles
        },
        (Line, float, float):{
            args:("base", "angle1", "angle2",),
            trgt:Triangle.fromAngles
        },
        (Point,):{
            args:("listOfPoint",),
            trgt:Triangle.fromPoints,
        },
        (Line,):{
            args:("listOfLine",),
            trgt:Triangle.fromLines,
        },
        (Line, Point,):{
            args:("line", "point",),
            trgt:Triangle.fromLine
        },
        retVal:Triangle
    },
    "copy":{
        tuple():{
            args:tuple(),
            trgt:Triangle.fromTriangle
        },
        retVal:Circle
    },
    "area":{
        tuple():{
            args:tuple(),
            trgt:Triangle.area
        },
        retVal:float
    },
    "centroid":{
        tuple():{
            args:tuple(),
            trgt:Triangle.centroid
        },
        retVal:Point
    },
    "orthocentre":{
        tuple():{
            args:tuple(),
            trgt:Triangle.orthocentre
        },
        retVal:Point
    },
    "incenter":{
        tuple():{
            args:tuple(),
            trgt:Triangle.incenter
        },
        retVal:Point
    },
    "circumcenter":{
        tuple():{
            args:tuple(),
            trgt:Triangle.circumcenter
        },
        retVal:Point
    },
    "incircle":{
        tuple():{
            args:tuple(),
            trgt:Triangle.incircle
        },
        retVal:Circle
    },
    "circumcircle":{
        tuple():{
            args:tuple(),
            trgt:Triangle.circumcircle
        },
        retVal:Circle
    },
    "median":{
        (Point,):{
            args:("point",),
            trgt:Triangle.medianFromPoint
        },
        (float,):{
            args:("idx",),
            trgt:Triangle.medianFromPoint
        },
        (Line,):{
            args:("line",),
            trgt:Triangle.medianOnLine
        },
        retVal:Line
    },
    "perpendicular":{
        (Point,):{
            args:("point",),
            trgt:Triangle.perpendicularFromPoint
        },
        (float,):{
            args:("idx",),
            trgt:Triangle.perpendicularFromPoint
        },
        (Line,):{
            args:("line",),
            trgt:Triangle.perpendicularOnLine
        },
        retVal:Line
    },
    "angleBisector":{
        (float,):{
            args:("idx",),
            trgt:Triangle.angleBisector
        },
        (Point,):{
            args:("point",),
            trgt:Triangle.angleBisector
        },
        (Line,):{
            args:("line",),
            trgt:Triangle.angleBisectorOnLine
        },
        retVal:Line
    }
}