"""Point Structure."""
from rules.drawable import *
triangleADT = {
    is_a:Polygon,
    "new":{
        (Point,):{
            args:("listOfPoint"),
            trgt:Triangle.fromPoints,
        },
        (Line,):{
            args:("listOfLine",),
            trgt:Triangle.fromLines,
        },
        (Line, Point):{
            args:("line", "point"),
            trgt:Triangle.fromLine
        },
        ret:Triangle
    },
    "copy":{
        tuple():{
            args:tuple(),
            trgt:Triangle.fromTriangle
        },
        ret:Circle
    },
    "area":{
        tuple():{
            args:tuple(),
            trgt:Triangle.area
        },
        ret:float
    },
    "centroid":{
        tuple():{
            args:tuple(),
            trgt:Triangle.centroid
        },
        ret:Point
    },
    "orthocentre":{
        tuple():{
            args:tuple(),
            trgt:Triangle.orthocentre
        },
        ret:Point
    },
    "incenter":{
        tuple():{
            args:tuple(),
            trgt:Triangle.incenter
        },
        ret:Point
    },
    "circumcenter":{
        tuple():{
            args:tuple(),
            trgt:Triangle.circumcenter
        },
        ret:Point
    },
    "incircle":{
        tuple():{
            args:tuple(),
            trgt:Triangle.incircle
        },
        ret:Circle
    },
    "circumcircle":{
        tuple():{
            args:tuple(),
            trgt:Triangle.circumcircle
        },
        ret:Circle
    },
    "median":{
        (Point,):{
            args:("point",),
            trgt:Triangle.medianFromPoint
        },
        (float,):{
            args:("idx",),
            trgt:Triangle.medianFromPoint
        },
        (Line,):{
            args:("line",),
            trgt:Triangle.medianOnLine
        },
        ret:Line
    },
    "perpendicular":{
        (Point,):{
            args:("point",),
            trgt:Triangle.perpendicularFromPoint
        },
        (float,):{
            args:("idx",),
            trgt:Triangle.perpendicularFromPoint
        },
        (Line,):{
            args:("line",),
            trgt:Triangle.perpendicularOnLine
        },
        ret:Line
    },
    "angleBisector":{
        (float,):{
            args:("idx",),
            trgt:Triangle.angleBisector
        },
        (Point,):{
            args:("point",),
            trgt:Triangle.angleBisector
        },
        (Line,):{
            args:("line",),
            trgt:Triangle.angleBisectorOnLine
        },
        ret:Line
    }
}