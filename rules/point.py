"""Point Structure."""
from rules.object import *
pointADT = {
    "target":Point,
    "new":{
        (Point):{
            "args":[
                "point"
            ],
            "target":Point.fromPoint,
        },
        (float,float):{
            "args":[
                "x",
                "y"
            ],
            "target":Point.fromCoOrdinates,
        },
        (float,float,Point):{
            "args":[
                "angle",
                "distance",
                "point"
            ],
            "target":Point.fromMetrics,
        },
        "return":Point
    },
    "get":{
        "args":(),
        "types":(),
        "target":Point.getPoint,
        "return":tuple
    },
    "set":{
        "args":("x","y"),
        "types":(float, float),
        "target":Point.setPoint,
        "return":None
    },
    "slopeTo":{
        "args":("point"),
        "types":(Point),
        "target":Point.slopeTo,
        "return":float
    },
    "angleTo":{
        "args":("point"),
        "types":(Point),
        "target":Point.angleTo,
        "return":float
    },
    "angleFromPoints":{
        "args":("point1","point2"),
        "types":(Point, Point),
        "target":Point.angleFromPoints,
        "return":float
    },
    "angleFromLine":{
        "args":("line"),
        "types":(Line),
        "target":Point.angleFromLine,
        "return":float
    },
    "distanceToPoint":{
        "args":("obj"),
        "types":(Point),
        "target":Point.distanceTo,
        "return":float
    },
    "distanceToLine":{
        "args":("obj"),
        "types":(Line),
        "target":Point.distanceTo,
        "return":float
    },
    "midPoint":{
        "args":("point"),
        "types":(Point),
        "target":Point.middlePoint,
        "return":Point
    },
    "projection":{
        "args":("line"),
        "types":(Line),
        "target":Point.projectionOn,
        "return":Point
    },
    "bisectPoints":{
        "args":("point"),
        "types":(Point),
        "target":Point.bisect,
        "return":Line
    },
    "angleBisectLine":{
        "args":("line"),
        "types":(Line),
        "target":Point.bisectAngleLine,
        "return":Line
    },
    "angleBisectPoints":{
        "args":("point1","point2"),
        "types":(Point, Point),
        "target":Point.bisectAnglePoints,
        "return":Line
    },
    "lineToPoint":{
        "args":("point"),
        "types":(Point),
        "target":Point.lineToPoint,
        "return":Line
    },
    "lineTo":{
        "args":("angle","distance"),
        "types":(float, float),
        "target":Point.lineTo,
        "return":Line
    },
    "triangle":{
        "args":("line"),
        "types":(Line),
        "target":Point.triangleTo,
        "return":Triangle
    },
    "circle":{
        "args":("radius"),
        "types":(float),
        "target":Point.circle,
        "return":Circle
    },
    "tangentCircle":{
        "args":("line"),
        "types":(Line),
        "target":Point.circleFromTangent,
        "return":Circle
    },
    "chordCircle":{
        "args":("line"),
        "types":(Line),
        "target":Point.circleFromChord,
        "return":Circle
    }
}